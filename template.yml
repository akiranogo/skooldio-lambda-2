AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs8.10
    Timeout: 120
    MemorySize: 512
    Environment:
      Variables:
        NODE_ENV: production

Resources:
  FaceSearchApi:
    Type: AWS::Serverless::Function
    Properties:
      Handler: api/lambda.handler
      CodeUri: .
      Environment:
        Variables:
          S3_BUCKET: !Sub "face-image-bucket-${AWS::AccountId}"
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Sub "face-image-bucket-${AWS::AccountId}"
        - RekognitionReadPolicy:
            CollectionId: skooldio
        - RekognitionWriteOnlyAccessPolicy:
            CollectionId: skooldio
      Events:
        FaceGetEvent:
          Type: Api
          Properties:
            Path: /face
            Method: get
        FacePostEvent:
          Type: Api
          Properties:
            Path: /face
            Method: post
  FaceDetectS3:
    Type: AWS::Serverless::Function
    Properties:
      Handler: s3/lambda.handler
      CodeUri: .
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Sub "face-image-bucket-${AWS::AccountId}"
        - RekognitionDetectOnlyPolicy: {}
      Events:
        S3ObjectCreateEvent:
          Type: S3
          Properties:
            Bucket:
              Ref: FaceImageBucket
            Events:
              - 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .jpg
  FaceImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      # Need to specify bucket name to avoid circular dependency. See https://aws.amazon.com/blogs/infrastructure-and-automation/handling-circular-dependency-errors-in-aws-cloudformation/
      BucketName: !Sub "face-image-bucket-${AWS::AccountId}"
